<launch>



<!-- Define a launch file parameter to indicate if the Arduino connection is established -->

  <arg name="arduino_connected" default="false" />

  <!-- Launch the serial_node.py with a prefix that waits until the Arduino connection is established -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node" output="screen">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="57600"/>
    <param name="arduino_connected" value="$(arg arduino_connected)" />
    <param name="launch_delay" value="10" />  <!-- Adjust the delay time as needed -->
    <param name="launch_delay_increment" value="0.5" />  <!-- Adjust the delay increment as needed -->
    <param name="launch_delay_max_attempts" value="20" />  <!-- Adjust the maximum number of attempts as needed -->
    <param name="launch_delay_topic" value="/arduino_status" />  <!-- Modify the topic name if needed -->
    <param name="launch_delay_message" value="connected" />  <!-- Modify the message content if needed -->
  </node>

  <arg name="model" default="$(find pixy)/urdf/pixy.urdf.xacro"/>

  <!-- Wait for the Arduino connection to be established -->
  <node pkg="rostopic" type="rostopic" name="arduino_connection_waiter" args="echo /arduino_status">
    <param name="arduino_connected" value="$(arg arduino_connected)" />
    <param name="expected_message" value="connected" />
  </node>
  
 

<!-- Transformation between /odom and /base_link -->
<node pkg="tf" type="static_transform_publisher" name="odom_to_base_link" args="0.05 0 0 0 0 0 odom base_footprint 10" />

<!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser2" args="0.06 0 0.08 0 0 0 base_link laser2 30" />


<!-- base_footprint -> base_link is a static transform.  we assume that the origin of the base_link coordinate frame (i.e. center of the robot) is located 0.09 meters above its footprint. -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />

 <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->
 <!--  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0.2 0.1 0 0 0 0 map odom 30" /> -->



 <!-- Lidar Data Publisher-->
 <!--Publishes: /scan /scan2-->
  <include file="$(find rplidar_ros)/launch/rplidar.launch" />
  <include file="$(find rplidar2_ros)/launch/rplidar2.launch" />

  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom_combined"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="false"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>
	

  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d /home/ahmed39/catkin_ws/src/adiutor/navstack_pub/maps/floorplan4.rviz">
  </node> 

  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node>  

  <!-- Map File -->
  <arg name="map_file" default="$(find navstack_pub)/maps/floorplan4.yaml"/>
	
  <!-- The map_server node is responsible for loading and serving the map file specified in the args attribute. 
  It publishes the map data on the /map topic and the map metadata on the /map_metadata topic. -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	

   <!-- Add AMCL example for differential drive robots for Localization -->
   <!-- Subscribe: /scan, /tf, /initialpose, /map -->
   <!-- Publish: /amcl_pose, /particlecloud, /tf -->
    <include file="$(find amcl)/examples/amcl_diff.launch"/> 


  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <!-- Publish scans from best pose at a max of 10 Hz -->
    <param name="odom_model_type" value="diff"/>
    <!-- Add other parameters here -->

    <remap from="scan" to="laser1/scan"/>
    <!-- The above line remaps the 'scan' topic to 'laser/scan' -->

    <remap from="scan2" to="laser2/scan"/>
    <!-- The above line remaps the 'scan2' topic to 'laser2/scan2' -->
  </node>

  
   <!-- Move Base Node -->
   <!-- Subscribe: /move_base_simple/goal -->
   <!-- Publish: /cmd_vel -->
   <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
  </node>

</launch>


